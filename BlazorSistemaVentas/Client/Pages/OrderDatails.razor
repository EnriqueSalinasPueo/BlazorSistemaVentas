@page "/orderdetails"

@attribute [Authorize]

@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject IClientService ClientService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<p>@Message</p>

@if (Order != null && clients != null)
{
    <EditForm Model="Order">

        <div class="card">
            <h5 class="card-header">Order Details</h5>
            <div class="card-body">
                <div class="container">

                    <div class="row">
                        <div class="col-md-4 mb-3">

                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-success" value="Save" @onclick="SaveOrder" />
                            <input type="button" class="btn btn-secondary" value="Cancel" @onclick="Cancel" />
                        </div>
                        <div class="col-md-4 mb-3">

                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Number</label>
                            <InputNumber class="form-control" @bind-Value="@Order.OrderNumber" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Order Date</label>
                            <InputDate class="form-control" @bind-Value="@Order.OrderDate" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="">Client</label>
                            <InputSelect class="form-control" @bind-Value="@Order.ClientId">
                                @foreach (var item in clients)
                                    {
                                    <option value="@item.Id">@item.FirstName</option>
                                    }

                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Delivery Date</label>
                            <InputDate class="form-control" @bind-Value="@Order.DeliveryDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Total</label>
                            <!--InputNumber class="form-control" bind-Value="Order.Total" />-->
                            <input type="text" class="form-control" readonly="readonly" value="@Order.Total.ToString("C")" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4 mb-3">

                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-primary" value="Add Product" @onclick="AddProduct" />
                        </div>
                        <div class="col-md-4 mb-3">

                        </div>
                    </div>

                </div>
            </div>
        </div>


        @if (Order.Products != null && Order.Products.Any())
        {
            <MudTable Items="@Order.Products" Hover="true" Breakpoint="Breakpoint.Sm">
                <ToolBarContent>
                    <MudText Typo="Typo.h6"></MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="ProductContext">
                    <MudTd DataLabel="Name">@ProductContext.Name</MudTd>
                    <MudTd DataLabel="Price">@ProductContext.Price</MudTd>
                    <MudTd DataLabel="Quantity">@ProductContext.Quantity</MudTd>
                    <MudTd DataLabel="">
                        <MudFab OnClick="(() => RemoveProduct(ProductContext.Id))"
                                Color="Color.Secondary"
                                Icon="@Icons.Material.Filled.Delete"
                                IconSize="Size.Small">
                         </MudFab>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }

    </EditForm>
}
else
{
    <p><em>Loading...</em></p>
}


@code {

    public Order Order;
    public IEnumerable<BlazorSistemaVentas.Shared.Client> clients;
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Order = new Order()
            {
                OrderNumber = await OrderService.GetNextNumber(),
                ProductCategoryId = 1,
                OrderDate = DateTime.Today,
                DeliveryDate = DateTime.Today
            };

            clients = await ClientService.GetAllClients();

        }
        catch (Exception e)
        {
            Message = "Error..." + e.Message;
        }
    }

    protected async Task SaveOrder()
    {
        await OrderService.SaveOrder(Order);
        NavigationHome();
    }

    private void NavigationHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected void Cancel()
    {
        NavigationHome();
    }

    protected async Task AddProduct()
    {
        // Ventana popap en la que instanciamos el dialog y lo mostrarlo
        var dialog = DialogService.Show<ProductDetails>("Product Details");

        // Le decimos al hilo de ejecucion que se espere a mostrar el resultado
        var result = await dialog.Result;

        // Si el resultado es verdadero lo agregamos a la lista de ordenes
        if (!result.Cancelled)
        {
            var product = (Product)result.Data;

            if (Order.Products == null)
            {
                Order.Products = new List<Product>();
            }

            Order.Products.Add(product);
        }
    }

    protected async Task RemoveProduct(int producId)
    {
        Order.Products.RemoveAll(p => p.Id == producId);
    }

}
