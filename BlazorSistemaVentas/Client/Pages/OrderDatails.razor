@page "/orderdetails"

@attribute [Authorize]

@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject IClientService ClientService
@inject IOrderService OrderService
@inject NavigationManager NavigationManager

<p>@Message</p>

@if (Order != null && ProductCategories != null && clients != null)
{
    <EditForm Model="Order">

        <div class="card">
            <h5 class="card-header">Order Details</h5>
            <div class="card-body">
                <div class="container">

                    <div class="row">
                        <div class="col-md-4 mb-3">

                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-success" value="Save" @onclick="SaveOrder" />
                            <input type="button" class="btn btn-secondary" value="Cancel" @onclick="Cancel" />
                        </div>
                        <div class="col-md-4 mb-3">

                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Number</label>
                            <InputNumber class="form-control" @bind-Value="@Order.OrderNumber" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Order Date</label>
                            <InputDate class="form-control" @bind-Value="@Order.OrderDate" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="">Client</label>
                            <InputSelect class="form-control" @bind-Value="@Order.ClientId">
                                @foreach (var item in clients)
                                    {
                                    <option value="@item.Id">@item.FirstName</option>
                                    }

                            </InputSelect>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="">Delivery Date</label>
                            <InputDate class="form-control" @bind-Value="@Order.DeliveryDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="">Total</label>
                            <InputNumber class="form-control" @bind-Value="@Order.Total" />
                        </div>
                    </div>


                </div>
            </div>
        </div>



        <label>Categories</label>
        <InputSelect class="form-control col-sm-5"
                     Value="@Order.ProductCategoryId"
                     ValueChanged="@((int productCategoryId) => ProductCategoryChanged(productCategoryId))"
                     ValueExpression="@(() => Order.ProductCategoryId)">
            @foreach (var item in ProductCategories)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>

        <label>Producto</label>
        <InputSelect class="form-control col-sm-5" @bind-Value="@ProdutcId">
            @foreach (var item in Product)
                {
                <option value="@item.Id">@item.Name</option>
                }
        </InputSelect>

    </EditForm>
}
else
{
    <p><em>Loading...</em></p>
}


@code {

    public Order Order;
    public IEnumerable<ProductCategory> ProductCategories;
    public IEnumerable<Product> Product;
    public IEnumerable<BlazorSistemaVentas.Shared.Client> clients;
    public string Message { get; set; }
    public int ProdutcId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Order = new Order() { ProductCategoryId = 1, OrderDate = DateTime.Today, DeliveryDate = DateTime.Today };

            Console.WriteLine("INICIO - Cliente llamada Service" + Order);

            ProductCategories = await ProductCategoryService.GetAll();

            clients = await ClientService.GetAllClients();

            await LoadProducts(Order.ProductCategoryId);

            Console.WriteLine("FIN - Cliente categorias cargadas Service" + ProductCategories);

        }
        catch (Exception e)
        {
            Message = "Error..." + e.Message;
        }
    }

    protected async Task ProductCategoryChanged(int productCategoryId)
    {
        Order.ProductCategoryId = productCategoryId;

        if (Order.ProductCategoryId > 0)
        {
            await LoadProducts(Order.ProductCategoryId);
        }
    }

    private async Task LoadProducts(int productCategoryId)
    {
        Product = await ProductService.GetByCategory(productCategoryId);
    }

    protected async Task SaveOrder()
    {
        await OrderService.SaveOrder(Order);
        NavigationHome();
    }

    private void NavigationHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected void Cancel()
    {
        NavigationHome();
    }
}
