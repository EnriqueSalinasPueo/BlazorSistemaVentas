@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject ISnackbar Snackbar

@if (ProductCategories != null && products != null)
{
    <MudDialog>
        <TitleContent>
            Product Details
        </TitleContent>

        <DialogContent>
            <EditForm Model="@Product">
                <div class="card">
                    <div class="card-body">
                        <div class="container">

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="">Category</label>
                                    <InputSelect class="form-control"
                                                 Value="@Product.ProductCategoryId"
                                                 ValueChanged="@((int productCategoryId) => ProductCategoryChanged(productCategoryId))"
                                                 ValueExpression="@(() => Product.ProductCategoryId)">
                                        @foreach (var item in ProductCategories)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="">Product</label>
                                    <InputSelect class="form-control"
                                                 Value="@Product.Id"
                                                 ValueChanged="@((int id) => ProductChanged(id))"
                                                 ValueExpression="@(() => Product.Id)">
                                        @foreach (var item in products)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <MudNumericField Disabled="true" Label="Price" @bind-Value="@Product.Price" Variant="Variant.Outlined" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <MudNumericField Label="Quantity" @bind-Value="@Product.Quantity" Variant="Variant.Outlined" />
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </EditForm>
        </DialogContent>
        <DialogActions>
            <MudButton Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="AddProduct">Add</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <p><em>Loading...</em></p>
}

@code {

    public Product Product = new Product();
    public IEnumerable<ProductCategory> ProductCategories = new List<ProductCategory>();
    public IEnumerable<Product> products = new List<Product>();
    public string Message { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {

            ProductCategories = await ProductCategoryService.GetAll();

            if (ProductCategories != null && ProductCategories.Any())
            {
                Product.ProductCategoryId = ProductCategories.FirstOrDefault().Id;
                await LoadProducts(Product.ProductCategoryId);
            }


        }
        catch (Exception e)
        {
            Message = "Error..." + e.Message;
        }
    }

    protected async Task ProductCategoryChanged(int productCategoryId)
    {
        Product.ProductCategoryId = productCategoryId;

        if (Product.ProductCategoryId > 0)
        {
            await LoadProducts(productCategoryId);
        }
    }

    protected async Task ProductChanged(int id)
    {

        if (id > 0)
        {
            Product = await ProductService.GetDetails(id);
        }
    }

    private async Task LoadProducts(int productCategoryId)
    {
        products = await ProductService.GetByCategory(productCategoryId);
        if (products != null && products.Any())
        {
            Product = await ProductService.GetDetails(products.FirstOrDefault().Id);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void AddProduct()
    {
        Snackbar.Add("Product added", Severity.Success, a => a.VisibleStateDuration = 200);
        MudDialog.Close(DialogResult.Ok(Product));
    }

}
